{"version":3,"sources":["components/option.js","components/questionCard.js","components/endOfGame.js","components/loading.js","App.js","services/getQuestions.js","globalStyles.js","index.js"],"names":["OptionButton","styled","button","Option","handleAnswer","answer","data","decodeHtml","useState","textButton","setTextButton","value","onClick","e","correct_answer","setTimeout","target","blur","handleClick","responsive","CardContainer","div","DivCard","Category","h1","Question","h2","OptionsDiv","Difficulty","QuestionCard","handlePoints","handleNumbQuestion","answers","incorrect_answers","concat","sort","Math","random","type","text","txt","document","createElement","innerHTML","category","toUpperCase","replace","question","map","ans","difficulty","TitleEndOfGame","ButtonEndOfGame","EndOfGame","points","handlePlayAgain","DivLoading","spin","keyframes","Spinner","Loading","HomeDiv","Header","header","Title","QuestionsDiv","App","setData","loading","setLoading","setPoints","numbQuestion","setNumbQuestion","endOfGame","setEndOfGame","playAgain","setPlayAgain","useEffect","fetch","then","res","json","catch","err","console","log","results","val","GlobalStyles","createGlobalStyle","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.88a3b956.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst OptionButton = styled.button`\r\n    min-width: 150px;\r\n    padding: 20px 5px;\r\n    margin: 20px;\r\n    border: none;\r\n    background-color: transparent;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-color: #121212;\r\n    border-top-left-radius: 12px;\r\n    transition: 0.5s;\r\n    cursor: pointer;\r\n\r\n    &:hover, :focus{\r\n    background-color: #121212;\r\n    box-shadow: 2px 5px 2px 1px rgba(0, 0, 0, 0.2);\r\n    font-weight: 700;\r\n    color: greenyellow;\r\n    }\r\n\r\n`;\r\n\r\nconst Option = ({handleAnswer, answer, data, decodeHtml}) => {\r\n\r\n    const [textButton, setTextButton] = useState(answer)\r\n\r\n    const handleClick = (e) => {\r\n        if (decodeHtml(data.correct_answer) === answer) {\r\n            setTextButton('Great!')\r\n        } else {\r\n            setTextButton('Wrong!')\r\n        }\r\n        setTimeout(() => {\r\n            setTextButton(answer)\r\n            e.target.blur()\r\n            handleAnswer(e)\r\n        }, 2000);\r\n    }\r\n\r\n    return(\r\n        <OptionButton value={answer} onClick={(e) => handleClick(e)}>{textButton}</OptionButton>\r\n    )\r\n}\r\n\r\nexport default Option","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Option from './option'\r\n\r\nconst responsive = '@media (min-width: 600px)'\r\n\r\nconst CardContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: flex-end;\r\n`;\r\n\r\nconst DivCard = styled.div`\r\n    width: 300px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: #272727;\r\n    box-shadow: 3px 5px 5px 1px rgba(0, 0, 0, 0.2);\r\n    border-top-left-radius: 60px;\r\n\r\n    ${responsive} {\r\n        width: 500px;\r\n    }\r\n`;\r\n\r\nconst Category = styled.h1`\r\n    position: relative;\r\n    bottom: 12px;\r\n    color: greenyellow;\r\n    font-size: 0.7rem;\r\n    font-weight: 300;\r\n    letter-spacing: 0.3em;\r\n    text-align: right;\r\n    width: 300px;\r\n    cursor: default;\r\n\r\n    ${responsive} {\r\n        width: 500px;\r\n    }\r\n`;\r\n\r\nconst Question = styled.h2`\r\n    width: 260px;\r\n    text-align: center;\r\n    font-size: 1.2rem;\r\n    margin: 40px 0 30px;\r\n\r\n    ${responsive} {\r\n        width: 400px;\r\n        margin: 80px 0 50px;\r\n    }\r\n`;\r\n\r\nconst OptionsDiv = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    margin-bottom: 50px;\r\n`;\r\n\r\nconst Difficulty = styled(Category)`\r\n    bottom: 0;\r\n    right: 313px;\r\n    text-align: left;\r\n    width: fit-content;\r\n    writing-mode: vertical-rl;\r\n    transform:scale(-1);\r\n\r\n    ${responsive} {\r\n        right: 513px;\r\n    }\r\n`;\r\n\r\nconst QuestionCard = ({handlePoints, data, handleNumbQuestion}) => {\r\n    const answers = data.incorrect_answers.concat(data.correct_answer)\r\n    answers.sort(()=> Math.random() - 0.5)\r\n\r\n    const handleAnswer = (e) => {\r\n        if (e.target.value === data.correct_answer) {\r\n            if (data.type === \"multiple\") {\r\n                handlePoints(10)\r\n            } else {\r\n                handlePoints(5)\r\n            }\r\n            handleNumbQuestion()\r\n        } else {\r\n            handleNumbQuestion()\r\n        }\r\n    }\r\n\r\n    const decodeHtml = (text) => {\r\n        var txt = document.createElement(\"textarea\")\r\n        txt.innerHTML = text\r\n        return txt.value\r\n    }\r\n\r\n    return (\r\n        <CardContainer>\r\n            <DivCard>\r\n                <Category>{`CATEGORY: ${data.category.toUpperCase().replace(': ', '-')}`}</Category>\r\n                <Question>{decodeHtml(data.question)}</Question>\r\n                <OptionsDiv>\r\n                    {answers.map(ans =>\r\n                        <Option key={ans} handleAnswer={handleAnswer} answer={decodeHtml(ans)} data={data} decodeHtml={decodeHtml} ></Option>\r\n                    )}\r\n                </OptionsDiv>\r\n            </DivCard>\r\n            <Difficulty>{`DIFFICULTY: ${data.difficulty.toUpperCase()}`}</Difficulty>\r\n        </CardContainer>\r\n    )\r\n}\r\n\r\nexport default QuestionCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst TitleEndOfGame = styled.h1`\r\n    font-size: 1.2rem;\r\n    text-align: center;\r\n`;\r\n\r\nconst ButtonEndOfGame = styled.button`\r\n    padding: 20px;\r\n    margin-top: 30px;\r\n    border: none;\r\n    background-color: #272727;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-color: #121212;\r\n    border-top-left-radius: 12px;\r\n    transition: 0.5s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n    background-color: #121212;\r\n    box-shadow: 2px 5px 2px 1px rgba(0, 0, 0, 0.2);\r\n    font-weight: 700;\r\n    color: greenyellow;\r\n    }\r\n`;\r\n\r\nconst EndOfGame = ({points, handlePlayAgain}) => {\r\n    return(\r\n        <div>\r\n            <TitleEndOfGame>points: {points}</TitleEndOfGame>\r\n            <ButtonEndOfGame onClick={()=> handlePlayAgain()}>PLAY AGAIN</ButtonEndOfGame>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EndOfGame","import React from 'react'\r\nimport styled, {keyframes} from 'styled-components'\r\n\r\nconst DivLoading = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst spin = keyframes`\r\n    from {\r\n        transform: rotate(0deg);\r\n    }\r\n\r\n    to {\r\n        transform: rotate(360deg);\r\n    }\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n    border: 4px solid rgba(0, 0, 0, .1);\r\n    width: 50px;\r\n    height: 50px;\r\n    border-radius: 50%;\r\n    border-left-color: greenyellow;\r\n\r\n    animation: ${spin} 1s ease infinite;\r\n`;\r\n\r\nconst Loading = () => {\r\n    return(\r\n        <DivLoading>\r\n            <Spinner />\r\n        </DivLoading>\r\n    )\r\n}\r\n\r\nexport default Loading","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport QuestionCard from './components/questionCard';\nimport EndOfGame from './components/endOfGame'\nimport {getQuestions} from './services/getQuestions'\nimport Loading from './components/loading';\n\nconst HomeDiv = styled.div`\n  width: 100%;\n  min-height: 100vh;\n`;\n\nconst Header = styled.header`\n  width: 100%;\n  text-align: center;\n  background-color: #272727;\n  box-shadow: 2px 5px 2px 1px rgba(0, 0, 0, 0.2);\n`;\n\nconst Title = styled.h1`\n  font-size: 2rem;\n  padding: 25px 0;\n  letter-spacing: 0.2em;\n  text-shadow: rgb(0 0 0 / 0.5) 0.1em 0.1em;\n`;\n\nconst QuestionsDiv = styled.div`\n    width: 100%;\n    min-height: 500px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 50px 0;\n`;\n\nfunction App() {\n\nconst [data, setData] = useState()\nconst [loading, setLoading] = useState(true)\nconst [points, setPoints] = useState(0)\nconst [numbQuestion, setNumbQuestion] = useState(0)\nconst [endOfGame, setEndOfGame] = useState(false)\nconst [playAgain, setPlayAgain] = useState(false)\n\nconst handlePoints = (val) => {\n  setPoints(points => points + val)\n}\n\nconst handleNumbQuestion = () => {\n  if (numbQuestion < 9) {\n    setNumbQuestion(numbQuestion => numbQuestion + 1)\n  } else {\n    setEndOfGame(true)\n  }\n}\n\nconst handlePlayAgain = () => {\n    setLoading(true)\n    setPoints(0)\n    setNumbQuestion(0)\n    setEndOfGame(false)\n    setPlayAgain(!playAgain)\n}\n\nuseEffect(() => {\n  getQuestions()\n  .then(res => {\n    setData(res.results)\n    setLoading(false)\n  })\n  .catch(err => console.log(err))\n}, [playAgain])\n\nif (loading) {\n   return <Loading></Loading>\n } else {\n    return (\n        <HomeDiv>\n          <Header>\n            <Title>QuizBox Vision</Title>\n          </Header>\n          <QuestionsDiv>\n            {endOfGame ? \n              <EndOfGame points={points} handlePlayAgain={handlePlayAgain} />\n            :\n              <QuestionCard handlePoints={handlePoints} data={data[numbQuestion]} handleNumbQuestion={handleNumbQuestion} />\n            }\n          </QuestionsDiv>\n        </HomeDiv>\n    )\n  }\n}\n\nexport default App","const url = 'https://opentdb.com/api.php?amount=10'\r\n\r\nexport const getQuestions = () => {\r\n    return fetch(url)\r\n    .then(res => res.json())\r\n    .catch(err => console.log(err))\r\n}","import {createGlobalStyle} from 'styled-components'\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n    *{    \r\n        margin:0;\r\n        padding: 0;\r\n        color: white;\r\n        font-family: monospace;\r\n        letter-spacing: 0.1em\r\n    }\r\n\r\n    body{\r\n        width: 100%;\r\n        background-color: #121212;\r\n        min-height: 100vh;\r\n    }\r\n`;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport {GlobalStyles} from './globalStyles'\n\nReactDOM.render(\n  <>\n    <GlobalStyles />\n    <App />\n  </>, \n  document.getElementById('root'))\n"],"sourceRoot":""}